---

- name: "Create container image repository for {{ Application }} and applying mirroring"
  hosts: localhost
  gather_facts: yes
  become: false
  tasks:
    - name: Create Repository
      uri:
        url: "https://{{ QUAY_ENDPOINT }}/api/v1/repository"
        method: POST
        headers:
          Authorization: "Bearer {{ QUAY_AUTH_TOKEN }}"
        validate_certs: no #delete when certs are trusted
        body_format: json
        status_code: 201
        body:
          repo_kind: 'image'
          namespace: "{{ organization }}"
          visibility: "{{ visibillity }}"
          repository: "{{ Application }}"
          description: "A container repository for {{ Application }}"
      register: result
      ignore_errors: true

    - name: Set repository state to Mirror
      uri:
        url: "https://{{ QUAY_ENDPOINT }}/api/v1/repository/{{ organization }}/{{ Application }}/changestate"
        method: PUT
        headers:
          Authorization: "Bearer {{ QUAY_AUTH_TOKEN }}"
        validate_certs: no
        body_format: json
        status_code: 200
        body:
          state: "MIRROR"

    - name: Configure Mirroring
      uri:
        url: "https://{{ QUAY_ENDPOINT }}/api/v1/repository/{{ organization }}/{{ Application }}/mirror"
        method: POST
        headers:
          Authorization: "Bearer {{ QUAY_AUTH_TOKEN }}"
        validate_certs: no
        body_format: json
        status_code: 201
        body:
          is_enabled: true
          external_registry_config:
            proxy:
              https_proxy: ""
              http_proxy: ""
              no_proxy: ""
            verify_tls: true
          external_registry_username: "{{ UPSTREAM_USERNAME }}"
          external_reference: "https://{{ UPSTREAN_REGISTRY }}/library/{{ Application }}"
          sync_start_date: "{{ ansible_date_time['iso8601'] }}"
          root_rule:
            rule_kind: "tag_glob_csv"
            rule_value:
              "{{ tags }}"
          external_registry_password: "{{ UPSTREAM_PASSWORD }}"
          sync_interval: 500
          robot_username: "{{ organization }}+{{ robot_username }}"
      ignore_errors: true # ignore only error_code that  says already exist/if status code not generic use regex
